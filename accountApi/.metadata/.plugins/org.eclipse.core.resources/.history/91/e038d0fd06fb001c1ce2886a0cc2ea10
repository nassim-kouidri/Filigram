package com.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.Modele.Comment;
import com.Modele.Message;
import com.Repository.CommentRepository;
import com.Repository.MessageRepository;
import com.Service.CommentsService;
import com.Service.PostsService;



@RestController
@RequestMapping("/api")
@CrossOrigin("http://localhost:3000/")
public class MessageController {

	@Autowired
	PostsService postsService;
	@Autowired
	CommentsService commentsService;
	@Autowired
	MessageRepository postsRepository;
	@Autowired
	CommentRepository commentRepository;

	Message post;
	
	Comment comment;
	

	
	@GetMapping("/Post")
	public Iterable<Message> getAllPost(){
		return postsService.getAllPost();
	}
	
//	@PostMapping("/addPost")
//	public Posts createPost(@RequestBody Posts post) {
//		return postsService.savePost(post);
//	}
	
	@PostMapping("/addComment")
	public Comment createComment(@RequestBody Comment comment) {
		return commentsService.saveComment(comment);
	}
	
	@PostMapping("/posts/{postId}/comments")
	public Comment createComment(@PathVariable (value = "postId") int postId,
	               @RequestBody Comment comment) {
	  return postsRepository.findById(postId).map(post -> {
	    comment.setPosts(post);
	    return commentRepository.save(comment);
	  }).orElseThrow();
	}
	
	
	@GetMapping("/Post/{idPost}")
	public Message getPost(@PathVariable("idPost") final int idPost) {
		Optional<Message> post = postsService.getPost(idPost);
		if(post.isPresent()) {
			return post.get();
		} else {
			return null;
		}
	}
	
	@DeleteMapping("/deletePost/{idPost}")
	public void deletePost(@PathVariable("idPost") final int idPost) {
		postsService.deletePost(idPost);
	}
	
	
	@GetMapping("/PostSignaled/{trueSignal}")
	public Iterable<Message> getAllPostSignaled(@PathVariable("trueSignal") final Boolean trueSignal){
		return postsService.getPostSignaled(trueSignal);
	}
	
	@GetMapping("/post/{idPost}/comments")
	public List<Comment> getComment(@PathVariable("idPost") final int idPost) {
		Optional<Message> post = postsService.getPost(idPost);
		if(post.isPresent()) {
			return post.get().getComments();
		} else {
			return null;
		}
	}
	

	@PutMapping(path="/signal/{idPost}")
	public Message updatePosts(@PathVariable("idPost") final int idPost, @RequestBody Message posts) {
		Optional<Message> e = postsService.getPost(idPost);
		if(e.isPresent()) {
			Message currentPosts = e.get();
			
			Boolean signalPost = posts.getSignalPost();
			if(signalPost != null) {
				currentPosts.setSignalPost(signalPost);
			}
			postsService.savePost(currentPosts);
			return currentPosts;
		} else {
			return null;
		}
	}	
	
	@PutMapping(path="/addLike/{idPost}")
	public Message addLike(@PathVariable("idPost") final int idPost, @RequestBody Message post) {
		Optional<Message> e = postsService.getPost(idPost);
		if(e.isPresent()) {
			Message currentPost = e.get();
			int likeCounter = post.getLikeCounter() + currentPost.getLikeCounter();
			currentPost.setLikeCounter(likeCounter);
			postsService.savePost(currentPost);
			return currentPost;
		} else {
			return null;
		}
	}
	
	

}
